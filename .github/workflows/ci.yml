name: liteMacro CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

# Cancel previous in-progress runs for the same ref (useful for PR updates)
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-test:
    name: Build & Test (Java ${{ matrix.java }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Adjust the Java versions as needed for your project
        java: ["21"]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v3

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: ${{ matrix.java }}
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build (includes tests & checks)
        run: ./gradlew --no-daemon build --stacktrace

      - name: Upload test reports (always)
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: liteMacro-test-reports
          path: |
            **/build/test-results/test/**
            **/build/reports/tests/test/**

      - name: Upload built jars (if any)
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: liteMacro-artifacts
          path: |
            **/build/libs/*.jar
            !**/*-sources.jar
            !**/*-javadoc.jar

  velocity:
    name: Velocity Test
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up JDK 21 (for Gradle build)
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: "21"
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build plugin
        run: ./gradlew --no-daemon build --stacktrace

      - name: Resolve plugin jar
        id: jar
        shell: bash
        run: |
          PLUGIN_JAR=$(ls -1 build/libs/*.jar | grep -vE 'sources|javadoc' | head -n1)
          echo "jar=$PLUGIN_JAR" >> "$GITHUB_OUTPUT"
          echo "Using plugin jar: $PLUGIN_JAR"

      - name: Prepare minimal velocity.toml
        run: |
          mkdir -p .ci
          cat > .ci/velocity.toml <<'EOF'
          # Minimal config for CI
          bind = "0.0.0.0:25577"
          motd = "CI Velocity"
          show-max-players = 1
          online-mode = false
          force-key-authentication = false
          EOF

      - name: Start Velocity (Docker)
        run: |
          docker run -d --name velocity-ci \
            -e TYPE=VELOCITY \
            -p 25577:25577 \
            -v "$(pwd)/.ci/velocity.toml:/server/velocity.toml:ro" \
            -v "$(pwd)/build/libs:/server/plugins" \
            itzg/bungeecord

      - name: Wait for boot & plugin load
        shell: bash
        run: |
          set -e
          PATTERN="liteMarco initialized"
          for i in {1..60}; do
            if docker logs velocity-ci 2>&1 | grep -q "$PATTERN"; then
              echo "✅ Plugin loaded: found '$PATTERN' in logs"
              exit 0
            fi
            sleep 2
          done
          echo "❌ Timeout waiting for plugin to load. Last logs:"
          docker logs velocity-ci || true
          exit 1

      - name: Stop container
        if: always()
        run: docker rm -f velocity-ci || true
